// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NearKart extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ownerId", Value.fromString(""));
    this.set("tokenId", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("media", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NearKart entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NearKart entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NearKart", id.toString(), this);
    }
  }

  static load(id: string): NearKart | null {
    return changetype<NearKart | null>(store.get("NearKart", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownerId(): string {
    let value = this.get("ownerId");
    return value!.toString();
  }

  set ownerId(value: string) {
    this.set("ownerId", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get media(): string {
    let value = this.get("media");
    return value!.toString();
  }

  set media(value: string) {
    this.set("media", Value.fromString(value));
  }

  get mediaHistory(): Array<string> | null {
    let value = this.get("mediaHistory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set mediaHistory(value: Array<string> | null) {
    if (!value) {
      this.unset("mediaHistory");
    } else {
      this.set("mediaHistory", Value.fromStringArray(<Array<string>>value));
    }
  }

  get dailyScores(): Array<string> {
    let value = this.get("dailyScores");
    return value!.toStringArray();
  }

  set dailyScores(value: Array<string>) {
    this.set("dailyScores", Value.fromStringArray(value));
  }

  get monthlyScores(): Array<string> {
    let value = this.get("monthlyScores");
    return value!.toStringArray();
  }

  set monthlyScores(value: Array<string>) {
    this.set("monthlyScores", Value.fromStringArray(value));
  }
}

export class ScoreDaily extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("period", Value.fromBigInt(BigInt.zero()));
    this.set("numWins", Value.fromI32(0));
    this.set("numLosses", Value.fromI32(0));
    this.set("nearKart", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ScoreDaily entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ScoreDaily entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ScoreDaily", id.toString(), this);
    }
  }

  static load(id: string): ScoreDaily | null {
    return changetype<ScoreDaily | null>(store.get("ScoreDaily", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get period(): BigInt {
    let value = this.get("period");
    return value!.toBigInt();
  }

  set period(value: BigInt) {
    this.set("period", Value.fromBigInt(value));
  }

  get numWins(): i32 {
    let value = this.get("numWins");
    return value!.toI32();
  }

  set numWins(value: i32) {
    this.set("numWins", Value.fromI32(value));
  }

  get numLosses(): i32 {
    let value = this.get("numLosses");
    return value!.toI32();
  }

  set numLosses(value: i32) {
    this.set("numLosses", Value.fromI32(value));
  }

  get nearKart(): string {
    let value = this.get("nearKart");
    return value!.toString();
  }

  set nearKart(value: string) {
    this.set("nearKart", Value.fromString(value));
  }
}

export class ScoreMonthly extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("period", Value.fromBigInt(BigInt.zero()));
    this.set("numWins", Value.fromI32(0));
    this.set("numLosses", Value.fromI32(0));
    this.set("nearKart", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ScoreMonthly entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ScoreMonthly entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ScoreMonthly", id.toString(), this);
    }
  }

  static load(id: string): ScoreMonthly | null {
    return changetype<ScoreMonthly | null>(store.get("ScoreMonthly", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get period(): BigInt {
    let value = this.get("period");
    return value!.toBigInt();
  }

  set period(value: BigInt) {
    this.set("period", Value.fromBigInt(value));
  }

  get numWins(): i32 {
    let value = this.get("numWins");
    return value!.toI32();
  }

  set numWins(value: i32) {
    this.set("numWins", Value.fromI32(value));
  }

  get numLosses(): i32 {
    let value = this.get("numLosses");
    return value!.toI32();
  }

  set numLosses(value: i32) {
    this.set("numLosses", Value.fromI32(value));
  }

  get nearKart(): string {
    let value = this.get("nearKart");
    return value!.toString();
  }

  set nearKart(value: string) {
    this.set("nearKart", Value.fromString(value));
  }
}

export class NearKartsSimpleBattle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("homeAccount", Value.fromString(""));
    this.set("homeTokenId", Value.fromString(""));
    this.set("awayTokenId", Value.fromString(""));
    this.set("winner", Value.fromI32(0));
    this.set("prize", Value.fromString(""));
    this.set("extra", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save NearKartsSimpleBattle entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NearKartsSimpleBattle entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NearKartsSimpleBattle", id.toString(), this);
    }
  }

  static load(id: string): NearKartsSimpleBattle | null {
    return changetype<NearKartsSimpleBattle | null>(
      store.get("NearKartsSimpleBattle", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get homeAccount(): string {
    let value = this.get("homeAccount");
    return value!.toString();
  }

  set homeAccount(value: string) {
    this.set("homeAccount", Value.fromString(value));
  }

  get homeTokenId(): string {
    let value = this.get("homeTokenId");
    return value!.toString();
  }

  set homeTokenId(value: string) {
    this.set("homeTokenId", Value.fromString(value));
  }

  get awayTokenId(): string {
    let value = this.get("awayTokenId");
    return value!.toString();
  }

  set awayTokenId(value: string) {
    this.set("awayTokenId", Value.fromString(value));
  }

  get winner(): i32 {
    let value = this.get("winner");
    return value!.toI32();
  }

  set winner(value: i32) {
    this.set("winner", Value.fromI32(value));
  }

  get battle(): BigInt | null {
    let value = this.get("battle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set battle(value: BigInt | null) {
    if (!value) {
      this.unset("battle");
    } else {
      this.set("battle", Value.fromBigInt(<BigInt>value));
    }
  }

  get prize(): string {
    let value = this.get("prize");
    return value!.toString();
  }

  set prize(value: string) {
    this.set("prize", Value.fromString(value));
  }

  get extra(): string {
    let value = this.get("extra");
    return value!.toString();
  }

  set extra(value: string) {
    this.set("extra", Value.fromString(value));
  }
}
